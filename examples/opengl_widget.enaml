import numpy as np

# add factory
from enaml.qt import qt_factories
def create_openglwidget():
    from enaml_opengl.qt.qt_opengl_widget import QtOpenGLWidget
    return QtOpenGLWidget

qt_factories.QT_FACTORIES['OpenGLWidget'] = create_openglwidget


from enaml.application import Application

from enaml.widgets.api import MainWindow, Container
from enaml_opengl.widgets.opengl_widget import OpenGLWidget

from enaml_opengl.renderer import MonoRenderer
from enaml_opengl.camera import PinholeCamera
from enaml_opengl.viewport import PerspectiveViewport

from enaml_opengl.nodes.coordinate_axes import AxisItem



# initialize modelview-matrix
mv = np.eye(4)
mv[0:3, 3] = np.array([0., 0., 5.])
mv = np.linalg.inv(mv)

enamldef Main(MainWindow):
    title = 'OpenGL Widget Test'

    AxisItem: ai1:
        line_width = 3.0

    #ArcballCameraControl: arcball:
    #   sensitivity = 1.0

    PinholeCamera: camera:
        viewport = PerspectiveViewport()
        modelview_matrix = mv
        #modelview_matrix = arcball.inv_modelview_matrix

    MonoRenderer: renderer:
        camera = camera
        nodes << [ai1, ]



    Container:
        OpenGLWidget:
            minimum_size = (800, 600)
            renderer = renderer
            mouse_press_event::
                print "mouse press", change["value"].position
                #arcball.mouse_pressed(change["value"])
            mouse_move_event::
                print "mouse move", change["value"].position
                #arcball.mouse_moved(change["value"])
            mouse_wheel_event::
                print "mouse wheel", change["value"].delta
                #arcball.mouse_wheel(change["value"])
            key_press_event::
                ev = change["value"]
                if not ev.is_modifier:
                    print "key press", ev.text
                    self.update()

            initialized::
                print "opengl widget is initialized"
                renderer.trigger_update()