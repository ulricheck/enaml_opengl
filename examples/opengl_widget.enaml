import numpy as np

# add factory
from enaml.qt import qt_factories
def create_openglwidget():
    from enaml_opengl.qt.qt_opengl_widget import QtOpenGLWidget
    return QtOpenGLWidget

qt_factories.QT_FACTORIES['OpenGLWidget'] = create_openglwidget

from enaml.widgets.api import MainWindow, Container
from enaml_opengl.widgets.opengl_widget import OpenGLWidget

from enaml_opengl.geometry import Vec3d
from enaml_opengl.renderer import MonoRenderer
from enaml_opengl.camera import PinholeCamera
from enaml_opengl.viewport import PerspectiveViewport

from enaml_opengl.scenegraph_node import Scene3D
from enaml_opengl.arcball import ArcballCameraControl

from enaml_opengl.nodes.api import (AxisItem, GridItem, LinePlotItem, BoxItem,
    ScatterPlotItem)


enamldef Main(MainWindow):

    title = 'OpenGL Widget Test'

    Scene3D: scene:

        GridItem:
            depth = 10

        AxisItem:
            line_width = 1.0

        LinePlotItem:
            pos = np.asarray([[0,0,0],[0,0.5,0],[0,0.5,0.5],[-0.5,0.5,0],[-0.5,0,-0.5],[-0.5,0,0],])
            color = [1.0, 0.0, 0.0, 0.5]

        BoxItem:
            size = Vec3d(0.4, 0.2, 0.3)

        ScatterPlotItem:
            pos = np.asarray([[0,0,0],[0,0.5,0],[0,0.5,0.5],[-0.5,0.5,0],[-0.5,0,-0.5],[-0.5,0,0],])
            color = [0.0, 0.0, 1.0, 0.5]
            size = 10

    PinholeCamera: camera:
        viewport = PerspectiveViewport()
        modelview_matrix::
            glwin1.update()



    MonoRenderer: renderer:
        camera = camera
        scene << scene


    Container:
        OpenGLWidget: glwin1:
            minimum_size = (800, 600)
            renderer = renderer
            mouse_handler = arcball
            key_handler = arcball

            initialized::
                renderer.trigger_update()

    ArcballCameraControl: arcball:
        modelview_matrix := camera.modelview_matrix
        window_size << renderer.canvas_size

        position = np.array([0, 0, 5, 0])
        orientation = np.eye(4)

